#
#  Usage
# --------
# Python module name:
#   id: Ruby module name
#     e.g. id: numo/narray # import numpy as np => require 'numo/narray'
#   mod_name: Ruby module namespace : %(mod)s
#     e.g. mod_name: Numo  # from numpy import array => require 'numo/narray'; include Numo # mod: mod_name + '::'
#   mod_class_name:
#     Pyth n class name: Ruby class name    # For class inheritance
#     e.g. TestCase: 'Test::Unit::TestCase'
#
#   methods_map:
#     Python method name:
#       bracket: False             => argument bracket
#                                     True: use bracket(default) # e.g. Numo::NArray.cast([3.0, 4.0]).prod(keepdims: true)
#                                     False: not use bracket                                              ^^^^^^^^^^^^^^^^
#       key:
#         - ['second']             => argument count 1 (len(key[..]) == 1) case
#         - ['first', 'second'..]  => argument count 2 (len(key[..]) == 2) or not match (key[-1]) case
#       key_order:                 => key order change setting
#         - ['second']             => argument count 1 (len(key_order[..]) == 1) case
#         - ['second', 'first'..]  => argument count 2 (len(key_order[..]) == 2) or not match (key[-1]) case
#       main_data_key: object      => Main data key name : %(data)s
#
#       main_func: '(%(data)s).sum'  # convert to Ruby method
#        or
#       main_func_key: dtype       => convert function key name
#       main_func_hash_nm: 'NArray' => convert function name (not match(default) case)
#       main_func_hash: *func_hash  => convert function name (match case)
#
#       val:                       => arguments dict
#         object: False            => Not use argument data
#         dtype:  '%(mod)s%(main_func)s.cast(%(data)s)'  # convert to Ruby method
#         axis: axis               => Use keyword argument data
#       rtn:
#         - "%(start)s"            => customize return string (main_func + rtn) : argument count 1 (rtn[0]) case
#         - "%(start)s %(second)s" => customize return string (main_func + rtn) : argument count 2 (rtn[1]) or over (rtn[-1]) case
#
#   ignore:
#     Python method name:          # ignore case
#       e.g.    main: ''
#

numpy:
  id: numo/narray # import numpy as np => require 'numo/narray'
  mod_name: Numo  # from numpy import array => require 'numo/narray'; include Numo # mod: mod_name + '::'
  methods_map:
    array:
      # array(object, dtype=None, copy=True, order='K', subok=False, ndmin=0)
      # => Numo::NArray[object]
      # => Numo::Int32[object]
      bracket: False
      key:
        - [object, dtype, copy, order, subok, ndmin]
      main_data_key: object                       # Main data
      main_func_key: dtype                        # convert function key name
      main_func_hash_nm: 'NArray'                 # convert function name (not match(default) case)
      main_func_hash: &func_hash                  # convert function name
          '%s.int8':    'Int8'
          '%s.int16':   'Int16'        # np.array([5], dtype=np.int16) => Numo::Int16.cast([5])
          '%s.int32':   'Int32'
          '%s.int64':   'Int64'
          '%s.int':     'Int64'
          '%s.uint8':   'UInt8'
          '%s.uint16':  'UInt16'
          '%s.uint32':  'UInt32'
          '%s.uint64':  'UInt64'
          '%s.float32': 'SFloat'
          '%s.float64': 'DFloat'
      val:
        object: False                             # Not use argument data
        dtype:  '%(mod)s%(main_func)s.cast(%(data)s)'  # np.array([5], dtype=np.float32) => Numo::NArray.cast([5])
    prod:
      # prod(a, axis=None, dtype=None, out=None, keepdims=<class numpy._globals._NoValue>)
      # => prod(axis: nil, keepdims: false, nan: false)
      #  e.g.
      #    np.prod(shape, axis=1, keepdims=True) => Numo::NArray[shape].prod(axis:1, keepdims:true)
      #    np.prod(shape, axis=0,dtype=np.int32) => Numo::Int32[shape].prod(axis:0)
      key:
        - [a, axis, dtype, out, keepdims]
      main_data_key: a                            # Main data
      main_func_key: dtype                        # convert function key name
      main_func_hash_nm: 'NArray'                 # convert function name (not match(default) case)
      main_func_hash: *func_hash                  # convert function name
      val:
        a: False                                  # Not use argument data
        axis: axis                                # Use keyword argument data
        dtype: '%(mod)s%(main_func)s.cast(%(data)s).prod' # convert function
        out: False                                # Not use argument data
        keepdims: keepdims                        # Use keyword argument data
    array2string:
      # array2string(a, max_line_width=None, precision=None, suppress_small=None, separator=' ', prefix='', style=<built-in function repr>, formatter=None)[source]
      # => format_to_a(separator: ' ')
      key:
        - [a, max_line_width, precision, suppress_small, separator, prefix, style, formatter]
      main_data_key: a                            # Main data : %(data)s
      main_func: '(%(data)s).format_to_a.join'    # convert function : np.array2string(a) => a.format_to_a()
      val:
        a: False                                  # Not use argument data
        separator: True                           # Use argument data # np.array2string(x, separator=%s) => x.format_to_a().join(%s)
    sum:
      # (a, axis=None, dtype=None, out=None, keepdims=<class numpy._globals._NoValue>)[source]
      key:
        - [a, axis, dtype, out, keepdims]
      val:
        a: False                                  # Not use argument data
      main_data_key: a                            # Main data : %(data)s
      main_func: '(%(data)s).sum'                 # convert function : np.sum(w*x) => (w*x).sum
    ndarray:
      bracket: False
      main_func: '%(mod)sNArray'                  # convert function : np.ndarray => Numo::NArray
    nan:
      bracket: False
      main_func: 'Float::NAN'
    inf:
      bracket: False
      main_func: 'Float::INFINITY'
    exp:
      # (x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])
      main_func: '%(mod)sNMath.exp'               # np.exp(-x) => Numo::NMath.exp(-x)
      key:
        - [x, out, where, casting, order, dtype, subok]
      val:
        x: True
    sin:
      # (x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])
      main_func: '%(mod)sNMath.sin'
      key:
        - [x, out, where, casting, order, dtype, subok]
      val:
        x: True
    cos:
      # (x, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])
      main_func: '%(mod)sNMath.cos'
      key:
        - [x, out, where, casting, order, dtype, subok]
      val:
        x: True
    maximum:
      # (x1, x2, /, out=None, *, where=True, casting='same_kind', order='K', dtype=None, subok=True[, signature, extobj])
      main_func: '%(mod)sNArray.maximum'
      key:
        - [x1, x2, out, where, casting, same_kind, order, dtype, subok]
      val:
        x1: True
        x2: True
    linspace:
      # (start, stop, num=50, endpoint=True, retstep=False, dtype=None)
      main_func_key: dtype                        # convert function key name
      main_func_hash_nm: 'DFloat'                 # convert function name (not match(default) case)
      main_func_hash: *func_hash                  # convert function name
      key:
        - [start, stop, num, endpoint, retstep, dtype]
      val:
        start: True
        stop: True
        num: True
        endpoint : False
        retstep : False
        dtype: '%(mod)s%(main_func)s%(data)s.linspace' # np.linspace(2.0, 3.0, num=5) => Numo::DFloat.linspace(2.0, 3.0, 5)
    arange:
      # ([start, ]stop, [step, ]dtype=None)
      main_func_key: dtype                        # convert function key name
      main_func_hash_nm: 'DFloat'                 # convert function name (not match(default) case)
      main_func_hash: *func_hash                  # convert function name
      key:
        - [stop]                                  # argument count 1 case
        - [start, stop, step, dtype]              # argument count 2 or over (not 1) case
      val:
        start: True
        stop: True
        step: True
        dtype: '%(mod)s%(main_func)s%(data)s'
      rtn:
        # <Python> np.arange(6)
        # <Ruby>   Numo::DFloat.new(6).seq(0)
        #          => [0, 1, 2, 3, 4, 5]
        - ".new(%(stop)s).seq(0)"
        # <Python> np.arange(1,6) # s:start, e:stop
        # <Ruby>   Numo::DFloat.new(6-1).seq(1)
        #          => [1, 2, 3, 4, 5]
        - ".new(%(stop)s-(%(start)s)).seq(%(start)s)"
        # <Python> np.arange(1,6,2) # s:start, e:stop, t:step
        # <Ruby>   Numo::DFloat.new(((6-1)/2.to_f).ceil).seq(1, 2)
        #          =>[1, 3, 5]
        - ".new(((%(stop)s-(%(start)s))/(%(step)s).to_f).ceil).seq(%(start)s, %(step)s)"
