#
#  Usage
# --------
# Python module name:
#   Ruby module name: # import numpy as np => require 'numo/narray'
#
#   order_methods_without_bracket: {
#     Python method name: Ruby method name # Case independent of the number of arguments.
#   }
#   order_methods_without_bracket: {
#     Python method name: {
#       arg_0: Ruby method name # Case without arguments.
#       arg_1: Ruby method name # Case with only one argument.
#       arg_2: Ruby method name # Case with two arguments.
#   }
#
#     e.g. np.array([x1, x2]) => Numo::NArray[x1, x2]
#
#   order_methods_with_bracket: {
#     Python method name: Ruby method name # Case independent of the number of arguments.
#   }
#   order_methods_with_bracket:
#
#     e.g. np.exp(-x) => Numo::NMath.exp(-x)
#
#   order_methods_with_bracket_2_1_x:
#
#     e.g. assertIn(1, [1,2]) => assert_include([1,2], 1)
#
#   reverse_methods:
#
#       arg_1: Ruby method name # Case with only one argument.
#         e.g. np.sum(w*x) => (w*x).sum
#       arg_2: Ruby method name # Case with two arguments.
#         e.g. heapq.heappush(list, item) => list.push(item)
#
#   range_methods:
#
#     e.g. np.arange(-5.0, 5.0, 0.1) => Numo::DFloat.new(20).seq(-1,0.1)

numpy:
  id: numo/narray # import numpy as np => require 'numo/narray'
  order_methods_without_bracket: {
    array: {
      arg_1 : 'Numo::NArray', # np.array([x1, x2]) => Numo::NArray[x1, x2]
      arg_2 : {
        'dtype: %s.float32' : 'Numo::NArray', # np.array([5], dtype=np.float32) => Numo::NArray[5]
        'dtype: %s.int' : ''                  # np.array(x > 0, dtype=np.int) => x > 0
      }
    },
    prod: {
      arg_1 : 'Numo::NArray[%s].prod', # np.prod(shape) => Numo::NArray[shape].prod
      arg_2 : {
        'dtype: %s.int32' : 'Numo::Int32[%s].prod',      # np.prod(shape, dtype=np.int32) => Numo::Int32[shape].prod
        'dtype: %s.float32' : 'Numo::Float32[%s].prod'
      }
    },
    linspace: 'Numo::DFloat.linspace'
  }
  order_methods_with_bracket: {
    exp: 'Numo::NMath.exp',        # np.exp(-x) => Numo::NMath.exp(-x)
    sin: 'Numo::NMath.sin',
    cos: 'Numo::NMath.cos',
    maximum: 'Numo::NArray.maximum'
  }
  reverse_methods: {sum: 'sum'}    # np.sum(w*x) => (w*x).sum
  range_methods: {arange: 'Numo::DFloat.new'} # np.arange(-5.0, 5.0, 0.1) => Numo::DFloat.new(20).seq(-1,0.1)

os:
  id: 
  order_methods_with_bracket: {
    path.dirname: 'File.dirname',
    path.basename: 'File.basename',
    path.join: 'File.join',
    walk: 'PyLib.walk'
  }

copy:
  id:
  reverse_methods: {copy: 'dup'}    # copy(foo) => (foo).dup

six:
  id:
  reverse_methods: {
    itervalues: 'values',
    iteritems: 'to_a'
  }
  attribute_map: {
    PY2: 'false',
    PY3: 'true',
    integer_types: '[Integer]'
  }
  range_map: {moves.range: ''}

collections:
  id:
  dict_map: {
    OrderedDict: ''
  }

warnings:
  id:
  order_methods_with_bracket: {
    warn: 'warn'
  }

weakref:
  id: weakref
  order_methods_with_bracket: {
    ref: 'WeakRef.new'
  }

# Provisional implementation.
heapq:
  id:
  reverse_methods: {
    heappush: {
      arg_2 : 'push'
    },
    heappop: {
      arg_1 : 'pop',
    },
  }

# Provisional implementation.
traceback:
  id:
  reverse_methods: {
    format_list: to_a
  }

unittest:
  id: test/unit
  mod_class_name: {TestCase: 'Test::Unit::TestCase'}
  order_methods_with_bracket_2_1_x: {
    TestCase.assertIn: 'assert_include',
    TestCase.assertEqual: 'assert_equal'
  }
  order_methods_with_bracket: {TestCase.assertTrue: 'assert'}
  ignore: {main: ''}

